body {
    margin: 0;
    background-color: #1C1C1F;
    display: flex; /* Still useful for centering the Pixi canvas if it's not full screen */
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden; /* Prevent scrollbars */
}

/* PIXI will create its own canvas, so direct styling might be less necessary,
   but we can style the body to ensure the canvas is centered if it's not set to resizeTo: window */
canvas { /* PixiJS appends a canvas element */
    /* display: block; Optional: if issues with spacing */
}

#gridContainer {
    display: grid;
    grid-template-columns: repeat(auto-fill, 16px); /* Adjust column count based on container width */
    gap: 16px;
    padding: 16px; /* Add padding around the grid */
    position: relative; /* For absolute positioning of canvas if needed, though canvas is separate */
}

.circle {
    width: 16px;
    height: 16px;
    background-color: #27272B; /* basic inactive circle */
    border-radius: 50%;
    transition: background-color 0.1s ease-in-out; /* Smooth color transition */
}

/* Styles for hovered and connected states will be handled by JS if they need to override canvas lines,
   or can be added here if preferred. For simplicity, JS will handle dynamic class changes.
   Example (can be activated by JS):
.circle.hovered {
    background-color: #2B2B31; 
}

.circle.connected {
    background-color: #29292E; 
}
*/

#linesCanvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allows mouse events to pass through to the circles */
    z-index: 1; /* Increased z-index to draw lines on top */
}

// create once
const tex = app.renderer.generateTexture(
  new PIXI.Graphics().circle(circleRadius,circleRadius,circleRadius).fill(0xFFFFFF)
);

const sp = new PIXI.Sprite(tex);
sp.anchor.set(0.5);
sp.tint = colors.inactive;    // change this on hover / connect 

app.stage.eventMode = 'static';
app.stage.on('pointermove', onPointer);

function onPointer(e){
  const {x,y} = e.global;

  if (x < offsetX || y < offsetY) return clearHover();

  const col = Math.floor((x - offsetX) / step);
  const row = Math.floor((y - offsetY) / step);
  if (col<0 || col>=cols || row<0 || row>=rows) return clearHover();

  const idx = row*cols + col;
  setHovered(circlesData[idx]);
} 

lineGraphics.clear();
lineGraphics.strokeStyle ??= {width:1,color:colors.line,pixelLine:true};
selected.forEach(n=>{ â€¦ });
lineGraphics.stroke(); 

circlesData.forEach((c,i)=>{
  c.neighbours = circlesData.filter(o=>o!==c &&
    getDistance(c,o)<=connectionRadius);
}); 